{"ast":null,"code":"import _slicedToArray from \"/Users/nikhilkedia/Desktop/Tic Tac Toe React App/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nikhilkedia/Desktop/Tic Tac Toe React App/my-app/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport blacksquare from \"./blacksquare.svg\";\nimport sean from \"./sean150.jpg\";\n\nfunction Square(props) {\n  const className = \"square\" + (props.highlight ? \" highlight\" : \"\");\n  return React.createElement(\"button\", {\n    className: className,\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    const winLine = this.props.winLine;\n    return React.createElement(Square, {\n      key: i,\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      highlight: winLine && winLine.includes(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    const boardSize = 3;\n    let squares = [];\n\n    for (let i = 0; i < boardSize; ++i) {\n      let row = [];\n\n      for (let j = 0; j < boardSize; ++j) {\n        row.push(this.renderSquare(i * boardSize + j));\n      }\n\n      squares.push(React.createElement(\"div\", {\n        key: i,\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, row));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, squares);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      isAscending: true,\n      isSeanTurnedOn: false,\n      turnSeanOnBtnText: 'Turn Me On!'\n    };\n    this.turnSeanOn = this.turnSeanOn.bind(this);\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares).winner || squares[i]) {\n      return;\n    }\n\n    if (!this.state.isSeanTurnedOn) {\n      squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    } else {\n      squares[i] = this.state.xIsNext ? React.createElement(\"img\", {\n        src: blacksquare,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }) : React.createElement(\"img\", {\n        id: \"sean-icon\",\n        src: sean,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      });\n    }\n\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        latestMoveSquare: i\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  handleSortToggle() {\n    this.setState({\n      isAscending: !this.state.isAscending\n    });\n  }\n\n  turnSeanOn() {\n    if (this.state.isSeanTurnedOn) {\n      this.setState({\n        isSeanTurnedOn: false\n      });\n    } else {\n      this.setState({\n        isSeanTurnedOn: true\n      });\n    }\n  }\n\n  render() {\n    const history = this.state.history;\n    const stepNumber = this.state.stepNumber;\n    const current = history[stepNumber];\n    const winInfo = calculateWinner(current.squares);\n    const winner = winInfo.winner;\n    let moves = history.map((step, move) => {\n      const latestMoveSquare = step.latestMoveSquare;\n      const col = 1 + latestMoveSquare % 3;\n      const row = 1 + Math.floor(latestMoveSquare / 3);\n      const desc = move ? \"Go to move #\".concat(move, \" (\").concat(col, \", \").concat(row, \")\") : \"Starting Point\";\n      return React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: move === stepNumber ? \"move-list-item-selected\" : \"\",\n        onClick: () => this.jumpTo(move),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, desc));\n    });\n    let status;\n\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      if (winInfo.isDraw) {\n        status = \"Draw\";\n      } else {\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n      }\n    }\n\n    const isAscending = this.state.isAscending;\n\n    if (!isAscending) {\n      moves.reverse();\n    }\n\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      winLine: winInfo.line,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, status), React.createElement(\"button\", {\n      onClick: () => this.handleSortToggle(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, isAscending ? \"Descending\" : \"Ascending\"), React.createElement(\"button\", {\n      className: \"my-button\",\n      align: \"center\",\n      onClick: this.turnSeanOn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      id: \"sean-icon\",\n      src: sean,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), this.state.isSeanTurnedOn ? \"I'm Turned On!\" : \"Turn Me On!\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, moves)));\n  }\n\n}\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 189\n  },\n  __self: this\n}), document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const _lines$i = _slicedToArray(lines[i], 3),\n          a = _lines$i[0],\n          b = _lines$i[1],\n          c = _lines$i[2];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        line: lines[i],\n        isDraw: false\n      };\n    }\n  }\n\n  let isDraw = true;\n\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] === null) {\n      isDraw = false;\n      break;\n    }\n  }\n\n  return {\n    winner: null,\n    line: null,\n    isDraw: isDraw\n  };\n}","map":{"version":3,"sources":["/Users/nikhilkedia/Desktop/Tic Tac Toe React App/my-app/src/index.js"],"names":["React","ReactDOM","sean","Square","props","className","highlight","onClick","value","Board","Component","renderSquare","i","winLine","squares","includes","render","boardSize","row","j","push","Game","constructor","state","history","Array","fill","stepNumber","xIsNext","isAscending","isSeanTurnedOn","turnSeanOnBtnText","turnSeanOn","bind","handleClick","slice","current","length","calculateWinner","winner","blacksquare","setState","concat","latestMoveSquare","jumpTo","step","handleSortToggle","winInfo","moves","map","move","col","Math","floor","desc","status","isDraw","reverse","line","document","getElementById","lines","a","b","c"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport blacksquare from \"./blacksquare.svg\";\nimport sean from \"./sean150.jpg\";\n\nfunction Square(props) {\n  const className = \"square\" + (props.highlight ? \" highlight\" : \"\");\n  return (\n    <button className={className} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    const winLine = this.props.winLine;\n    return (\n      <Square\n        key={i}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        highlight={winLine && winLine.includes(i)}\n      />\n    );\n  }\n\n  render() {\n    const boardSize = 3;\n    let squares = [];\n    for (let i = 0; i < boardSize; ++i) {\n      let row = [];\n      for (let j = 0; j < boardSize; ++j) {\n        row.push(this.renderSquare(i * boardSize + j));\n      }\n      squares.push(\n        <div key={i} className=\"board-row\">\n          {row}\n        </div>\n      );\n    }\n\n    return <div>{squares}</div>;\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      isAscending: true,\n      isSeanTurnedOn: false,\n      turnSeanOnBtnText: 'Turn Me On!'\n    };\n    this.turnSeanOn = this.turnSeanOn.bind(this);\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares).winner || squares[i]) {\n      return;\n    }\n    if(!this.state.isSeanTurnedOn){\n      squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    } else {\n      squares[i] = this.state.xIsNext ? <img src={blacksquare} /> : <img id=\"sean-icon\" src={sean} />;\n    }\n    \n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n          latestMoveSquare: i\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  handleSortToggle() {\n    this.setState({\n      isAscending: !this.state.isAscending\n    });\n  }\n\n  turnSeanOn() {\n    if(this.state.isSeanTurnedOn){\n      this.setState({\n        isSeanTurnedOn: false\n      });\n    } else {\n      this.setState({\n        isSeanTurnedOn: true\n      });\n    }\n    \n  }\n\n  render() {\n    const history = this.state.history;\n    const stepNumber = this.state.stepNumber;\n    const current = history[stepNumber];\n    const winInfo = calculateWinner(current.squares);\n    const winner = winInfo.winner;\n\n    let moves = history.map((step, move) => {\n      const latestMoveSquare = step.latestMoveSquare;\n      const col = 1 + (latestMoveSquare % 3);\n      const row = 1 + Math.floor(latestMoveSquare / 3);\n      const desc = move\n        ? `Go to move #${move} (${col}, ${row})`\n        : \"Starting Point\";\n      return (\n        <li key={move}>\n          <button\n            className={move === stepNumber ? \"move-list-item-selected\" : \"\"}\n            onClick={() => this.jumpTo(move)}\n          >\n            {desc}\n          </button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      if (winInfo.isDraw) {\n        status = \"Draw\";\n      } else {\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n      }\n    }\n\n    const isAscending = this.state.isAscending;\n    if (!isAscending) {\n      moves.reverse();\n    }\n\n    return (\n      <div className=\"game\">\n          <div className=\"game-board\">\n            <Board\n              squares={current.squares}\n              onClick={i => this.handleClick(i)}\n              winLine={winInfo.line}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <button onClick={() => this.handleSortToggle()}>\n              {isAscending ? \"Descending\" : \"Ascending\"}\n            </button>\n            <button\n              className=\"my-button\"\n              align=\"center\"\n              onClick={this.turnSeanOn}\n            >\n              <img id=\"sean-icon\" src={sean} /><br></br>\n              {this.state.isSeanTurnedOn ? \"I'm Turned On!\" : \"Turn Me On!\"}\n            </button>\n            <ol>{moves}</ol>\n          </div>\n        </div>\n      \n    );\n  }\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        line: lines[i],\n        isDraw: false\n      };\n    }\n  }\n\n  let isDraw = true;\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] === null) {\n      isDraw = false;\n      break;\n    }\n  }\n  return {\n    winner: null,\n    line: null,\n    isDraw: isDraw\n  };\n}\n"]},"metadata":{},"sourceType":"module"}